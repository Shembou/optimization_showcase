services:
  traefik:
    image: traefik
    container_name: traefik
    ports:
      - "80:80"
      - "8080:8080" # Re-added for debugging
      - "443:443/tcp"
      - "443:443/udp"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - ./certs:/certs:ro
      - ./dynamic:/dynamic:ro
    networks:
      - proxy
    command:
      # EntryPoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"
      - "--entrypoints.websecure.http3=true"
      - "--entrypoints.postgres.address=:5432/tcp"

      # Attach the static configuration tls.yaml file that contains the tls configuration settings
      - "--providers.file.filename=/dynamic/tls.yaml"

      # Providers 
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=proxy"

      # API & Dashboard 
      - "--api.dashboard=true"
      - "--api.insecure=false"

      # Observability 
      - "--log.level=INFO"
      - "--accesslog=true"
      - "--metrics.prometheus=true"
    labels:
      - "traefik.enable=true"

      - "traefik.http.routers.dashboard.rule=Host(`dashboard.localhost`)"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.tls=true"

  # http2_api:
  #   build:
  #     context: ./backend/http
  #     dockerfile: dockerfile
  #     args:
  #       API_PORT: 3001
  #       GRPC_PORT: 3003
  #   container_name: http2
  #   networks:
  #     - proxy
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   labels:
  #     - "traefik.enable=true"

  #     - "traefik.http.routers.http2_api.rule=Host(`http2_api.localhost`)"
  #     - "traefik.http.routers.http2_api.entrypoints=websecure"
  #     - "traefik.http.routers.http2_api.service=http2_api_service"
  #     - "traefik.http.services.http2_api_service.loadbalancer.server.port=3001"
  #     - "traefik.http.services.http2_api_service.loadbalancer.server.scheme=https"
  #     - "traefik.http.services.http2_api_service.loadbalancer.serverstransport=insecure@file"

  #     - "traefik.http.routers.grpc_api.rule=Host(`grpc_api.localhost`)"
  #     - "traefik.http.routers.grpc_api.entrypoints=websecure"
  #     - "traefik.http.routers.grpc_api.service=grpc_service"
  #     - "traefik.http.services.grpc_service.loadbalancer.server.port=3003"
  #     - "traefik.http.services.grpc_service.loadbalancer.server.scheme=https"
  #     - "traefik.http.services.grpc_service.loadbalancer.serverstransport=insecure@file"
  #   environment:
  #     API_PORT: 3001
  #     GRPC_PORT: 3003
  #     DATABASE_URL: "postgresql://admin:password@db:5432/local_db"
  #     REDIS_URL: "redis://redis:6379"

  web:
    build:
      context: ./frontend/web
      dockerfile: Dockerfile
      args:
        PORT: 443
    container_name: web
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`web.localhost`)"
      - "traefik.http.routers.web.entrypoints=websecure"
      - "traefik.http.services.web.loadbalancer.server.scheme=https"
      - "traefik.http.services.web.loadbalancer.server.port=443"
      - "traefik.http.services.web.loadbalancer.serverstransport=insecure@file"
    environment:
      PORT: 443
      HTTP_API_ENDPOINT: go_api.localhost
      WEB_GRPC_ENDPOINT: go_grpc.localhost
  db:
    image: postgres
    restart: always
    container_name: db
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: local_db
    ports:
      - "5432:5432"
    networks:
      - proxy
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./database:/docker-entrypoint-initdb.d:ro
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.postgres.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.postgres.entrypoints=postgres"
      - "traefik.tcp.services.postgres.loadbalancer.server.port=5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d local_db" ]
      interval: 5s
      timeout: 5s
      retries: 5
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@localhost.com
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - proxy
    depends_on:
      - db
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`pgadmin.localhost`)"
      - "traefik.http.routers.pgadmin.entrypoints=websecure"
      - "traefik.http.routers.pgadmin.tls=true"
      - "traefik.http.services.pgadmin.loadbalancer.server.port=80"
  go_api:
    build:
      context: ./go_backend
      dockerfile: dockerfile
    container_name: go_api
    networks:
      - proxy
    depends_on:
      db:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.go_api.rule=Host(`go_api.localhost`)"
      - "traefik.http.routers.go_api.entrypoints=websecure"
      - "traefik.http.services.go_api.loadbalancer.server.port=4000"
      - "traefik.http.services.go_api.loadbalancer.server.scheme=https"
      - "traefik.http.services.go_api.loadbalancer.serverstransport=insecure@file"
    environment:
      READINGLIST_DB_DSN: postgres://admin:password@db/local_db?sslmode=disable
      COMMAND: api
      PORT: 4000

  go_graphql:
    build:
      context: ./go_backend
      dockerfile: dockerfile
    container_name: go_graphql
    networks:
      - proxy
    depends_on:
      db:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.go_graphql.rule=Host(`go_graphql.localhost`)"
      - "traefik.http.routers.go_graphql.entrypoints=websecure"
      - "traefik.http.services.go_graphql.loadbalancer.server.port=8080"
      - "traefik.http.services.go_graphql.loadbalancer.server.scheme=https"
      - "traefik.http.services.go_graphql.loadbalancer.serverstransport=insecure@file"
    environment:
      READINGLIST_DB_DSN: postgres://admin:password@db/local_db?sslmode=disable
      COMMAND: graphql
      PORT: 8080
  go_grpc:
    build:
      context: ./go_backend
      dockerfile: dockerfile
    container_name: go_grpc
    networks:
      - proxy
    depends_on:
      db:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.go_grpc.rule=Host(`go_grpc.localhost`)"
      - "traefik.http.routers.go_grpc.entrypoints=websecure"
      - "traefik.http.services.go_grpc.loadbalancer.server.port=50051"
      - "traefik.http.services.go_grpc.loadbalancer.server.scheme=https"
      - "traefik.http.services.go_grpc.loadbalancer.serverstransport=insecure@file"
    environment:
      READINGLIST_DB_DSN: postgres://admin:password@db/local_db?sslmode=disable
      COMMAND: grpc
      PORT: 50051

  soap:
    build:
      context: ./soap
      dockerfile: dockerfile
    container_name: soap
    networks:
      - proxy
    depends_on:
      db:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.soap.rule=Host(`soap.localhost`)"
      - "traefik.http.routers.soap.entrypoints=websecure"
      - "traefik.http.services.soap.loadbalancer.server.port=9001"
      - "traefik.http.services.soap.loadbalancer.server.scheme=https"
      - "traefik.http.services.soap.loadbalancer.serverstransport=insecure@file"

  # redis:
  #   image: redis
  #   container_name: redis
  #   restart: always
  #   ports:
  #     - "6379:6379"
  #   networks:
  #     - proxy
  #   labels:
  #     - "traefik.enable=false"
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: prometheus
  #   volumes:
  #     - ./prometheus.yaml:/etc/prometheus/prometheus.yml
  #   networks:
  #     - proxy
  #   ports:
  #     - "9090:9090"
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.prometheus.rule=Host(`prometheus.localhost`)"
  #     - "traefik.http.routers.prometheus.entrypoints=websecure"
  #     - "traefik.http.routers.prometheus.tls=true"
  #     - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
  # grafana:
  #   image: grafana/grafana-oss
  #   container_name: grafana
  #   networks:
  #     - proxy
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     - prometheus
  #   volumes:
  #     - grafana_storage:/var/lib/grafana
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"
  #     - "traefik.http.routers.grafana.entrypoints=websecure"
  #     - "traefik.http.routers.grafana.tls=true"
  #     - "traefik.http.services.grafana.loadbalancer.server.port=3000"


networks:
  proxy:
    name: proxy
volumes:
  pgadmin_data:
  db_data:
  grafana_storage:
