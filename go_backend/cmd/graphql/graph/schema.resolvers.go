package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"

	"github.com/Shembou/optimization_showcase/backend/cmd/graphql/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	users, err := r.App.Models.Users.GetAll()
	if err != nil {
		return nil, err
	}
	var mappedUsers []*model.User
	for _, u := range users {
		mappedUsers = append(mappedUsers, &model.User{
			ID:       int32(u.ID),
			Name:     u.Name,
			Language: u.Language,
			Bio:      u.Bio,
			Version:  int32(u.Version),
		})
	}
	return mappedUsers, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
